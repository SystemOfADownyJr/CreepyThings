{"version":3,"sources":["api/index.js","components/Login.js","components/Header.js","components/Register.js","components/Post.js","components/app.js","index.js"],"names":["BASE","a","fetch","then","response","json","result","console","log","Login","BASE_URL","useState","user","setUser","password","setPassword","event","preventDefault","method","headers","body","JSON","stringify","username","data","localStorage","setItem","token","to","onSubmit","type","value","onChange","target","placeholder","Header","className","Register","registerUser","setRegisterUser","registerPassword","setRegisterPassword","Post","newPost","setNewPost","useEffect","posts","postElement","map","element","i","title","price","location","description","getUsers","App","path","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.5066d53a.chunk.js","sourcesContent":["// import axios from 'axios';\n\nconst BASE = 'https://strangers-things.herokuapp.com/api/2105-OKU-RM-WEB-PT/'\n\nexport async function getUsers() {\n\n    fetch(`${BASE}posts`)\n    .then(response => response.json())\n    .then(result => {\n      console.log(result);\n    })\n}","// Since so much of the app requires users to be able to be logged in, starting here is probably prudent.\n\n// First you need to create a form which sends the correct data to the backend. Your register form should have a place to enter a username, a place to enter a password, and a place to enter password confirmation.\n\n// Perhaps you want to set a min property on password and username length, and you should definitely make them required on the form inputs.\n\n// If the form is filled out sufficiently, you'll need to make a correct AJAX request to the back end (see documentation). On successful user creation, you'll be given a token.\n\n// That token will need to be stored somewhere, perhaps localStorage, and sent with all future requests. Any fetch request with a valid token is considered authenticated, and the user corresponding to the token is assumed by the API to be the one making the requests.\n\n// Once you can register, you should offer a form to be able to login, and a button to be able to log out.\n\n// Remember, the presence of the token in localStorage should be how your front end treats the user as logged in/logged out, for all decisions it needs to make regarding rendering.\n\n// It might be useful for you to create some helper functions around this:\n\n// logIn - which sets the token in localStorage\n// logOut - which clears the token in localStorage\n// isLoggedIn - which lets you know if there's a current user logged in\n// And also, since you'll need them for fetch requests:\n\n// makeHeaders - which creates a headers object with our without the bearer token depending on what is in localStorage\n// For now, there are some \"testing\" API routes that let you see if you're currently logged in. You can hit them with fetch with headers (both logged in and logged out), and if you're setting them correctly you'll see the different responses you'll get.\n\n// You should also provide feedback on the form if the user provides incorrect credentials, as well as if the user tries to provide bad usernames or passwords.\n\nimport React, {useState} from \"react\";\n\nimport {Link} from 'react-router-dom';\n\n\nconst Login  = () => {\n\n    const BASE_URL = \"https://strangers-things.herokuapp.com/api/2105-OKU-RM-WEB-PT\";\n\n    const [user, setUser] = useState ('');\n    const [password, setPassword] = useState ('');\n\n    async function storeToken(event) {\n        event.preventDefault();\n        console.log (user, password);\n        try {\n            const response = await fetch(`${BASE_URL}/users/login`, {\n                method: 'POST', \n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                  body: JSON.stringify({\n                         user: {\n                            username: user,\n                            password: password\n      }\n\n        })\n            }); \n            const data = await response.json();\n            console.log(data);\n            localStorage.setItem('vb-token', data.token);\n        } catch (error) {\n            console.log (error);\n        }\n    }\n\n    return (\n        <div>\n            <Link to=\"/\">Stranger's Things</Link>\n            <form onSubmit={storeToken}>\n                <input type=\"text\"\n                        value={user}\n                        onChange={(event)=> setUser(event.target.value)}\n                        placeholder=\"username\" />    \n                <input type=\"password\"\n                        value={password}\n                        onChange={(event)=> setPassword(event.target.value)}\n                        placeholder=\"password\"></input>\n                <button>Submit</button>\n            </form>\n        </div>\n    )\n}\n\n\n\n\n\nexport default Login;","import React from \"react\";\n\n\nconst Header = () => {\n    return (\n        <div className=\"logo-image\">\n        <h3>Where logo can go</h3>\n        </div>\n     )\n}\n\n\nexport default Header;","// Since so much of the app requires users to be able to be logged in, starting here is probably prudent.\n\n// First you need to create a form which sends the correct data to the backend. Your register form should have a place to enter a username, a place to enter a password, and a place to enter password confirmation.\n\n// Perhaps you want to set a min property on password and username length, and you should definitely make them required on the form inputs.\n\n// If the form is filled out sufficiently, you'll need to make a correct AJAX request to the back end (see documentation). On successful user creation, you'll be given a token.\n\n// That token will need to be stored somewhere, perhaps localStorage, and sent with all future requests. Any fetch request with a valid token is considered authenticated, and the user corresponding to the token is assumed by the API to be the one making the requests.\n\n// Once you can register, you should offer a form to be able to login, and a button to be able to log out.\n\n// Remember, the presence of the token in localStorage should be how your front end treats the user as logged in/logged out, for all decisions it needs to make regarding rendering.\n\n// It might be useful for you to create some helper functions around this:\n\n// logIn - which sets the token in localStorage\n// logOut - which clears the token in localStorage\n// isLoggedIn - which lets you know if there's a current user logged in\n// And also, since you'll need them for fetch requests:\n\n// makeHeaders - which creates a headers object with our without the bearer token depending on what is in localStorage\n// For now, there are some \"testing\" API routes that let you see if you're currently logged in. You can hit them with fetch with headers (both logged in and logged out), and if you're setting them correctly you'll see the different responses you'll get.\n\n// You should also provide feedback on the form if the user provides incorrect credentials, as well as if the user tries to provide bad usernames or passwords.\n\nimport React, {useState} from \"react\";\n\nimport {Link} from 'react-router-dom';\n\n\nconst Register  = () => {\n\n    const BASE_URL = \"https://strangers-things.herokuapp.com/api/2105-OKU-RM-WEB-PT/\";\n\n    const [registerUser, setRegisterUser] = useState ('');\n    const [registerPassword, setRegisterPassword] = useState ('');\n\n    async function registerToken(event) {\n        event.preventDefault();\n        console.log (registerUser, setRegisterPassword);\n        try {\n            const response = await fetch(`${BASE_URL}/users/register`, {\n                method: 'POST', \n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                  body: JSON.stringify({\n                         user: {\n                            username: registerUser,\n                            password: registerPassword\n      }\n\n        })\n            }); \n            const data = await response.json();\n            console.log(data);\n            localStorage.setItem('vb-token', data.token);\n        } catch (error) {\n            console.log (error);\n        }\n    }\n\n    return (\n        <div>\n            <Link to=\"/\">Stranger's Things</Link>\n            <form onSubmit={registerToken}>\n                <input type=\"text\"\n                        value={registerUser}\n                        onChange={(event)=> setRegisterUser(event.target.value)}\n                        placeholder=\"username\" />    \n                <input type=\"password\"\n                        value={registerPassword}\n                        onChange={(event)=> setRegisterPassword(event.target.value)}\n                        placeholder=\"password\"></input>\n                <button>Register</button>\n            </form>\n        </div>\n    )\n}\n\n\nexport default Register;","\n\n\n\n// Next you should work on providing a pleasant view for all active posts.\n\n// As the app loads you should fetch the initial posts, and populate them into the element which holds the posts.\n\n// When you make a GET request to /api/posts, if you don't send a token, the API will only provide you with all posts. If you do, the posts made by the active user will also have the messages on them included.\n\n// There's an additional field provided by the API, isAuthor, which is only true for posts made by the user represented by the auth token.Make sure to suppress/show certain functionality for posts based on whether or not the current user is in fact the author.\n\n\n\n\n\n\n// _____________________\n\n// LOADING THE USER OBJECT ON PAGE LOAD\n// On page load, if there is a user logged in, you can make a GET request to /api/users/me and be given a user object. It will have all messages they've received, as well as all posts they've made (with messages partitioned by post).\n\n// It would be most useful to do this as part of your bootstrapping whenever the page is loaded.\n\n// _____________________\n\n// For any post, you should add a form to send a message to the post author, only if there is a logged in user and the logged in user is not the one who made it.\n\n// The message form really only needs a text input, and a button to create the message.\n\n// Again, like the delete button, the submit handler will need a way to know how to form the correct URL so that the API responds, so make sure you're recovering it from the post element, if you're attaching it as data to begin with.\n\n// -----------------------\n\n// Next you should work on providing a pleasant view for all active posts.\n\n// As the app loads you should fetch the initial posts, and populate them into the element which holds the posts.\n\n// When you make a GET request to /api/posts, if you don't send a token, the API will only provide you with all posts. If you do, the posts made by the active user will also have the messages on them included.\n\n// There's an additional field provided by the API, isAuthor, which is only true for posts made by the user represented by the auth token.Make sure to suppress/show certain functionality for posts based on whether or not the current user is in fact the author.\n\n// ---------\n\n// As part of your listings, add a little search form. Listen to the user typing into the field, and filter the listings in your state based on that.\n\n// One thing that is tempting is to replace the state with the results of the filter, but this will mean that if the user deletes the filter, or chooses to filter a new term, that you'd have to re-fetch the original list of postings.\n\n// Instead, keep a searchTerm in your state, and map over the postsToDisplay (or whatever you call it) instead of posts after the filter is applied. Below is a very loose attempt at providing some structure. You'll have to fill in the holes.\n\n\n\n\n\n// export default searchForm;\n\n// import React from \"react\";\n\n\n\n// export default Posts;\n\n\nimport React, {useState, useEffect} from \"react\";\n\nimport {Link} from 'react-router-dom';\n\n\nconst Post = () => {\n\n    const BASE_URL = \"https://strangers-things.herokuapp.com/api/2105-OKU-RM-WEB-PT/\";\n\n    const [newPost, setNewPost] = useState ([]);\n   \n\n    useEffect(async function getPost() {\n        console.log (newPost);\n        try {\n            const response = await fetch(`${BASE_URL}/posts`) \n                    \n            const data = await response.json();\n            console.log(data);\n            console.log(data.data.posts);\n            setNewPost(data.data.posts);\n        } catch (error) {\n            console.log (error);\n        }\n    },[]);\n\nconst postElement=newPost.map((element, i)=>\n    <div key={`post-id${i}`}>\n        <p>{element.title}</p>\n        <p>Price : {element.price}</p>\n        <p>Location : {element.location}</p>\n        <p>Description : {element.description}</p>\n        \n    </div>)\n    return (\n        <div>\n           <h1>I am in Post</h1>\n           {postElement}\n        </div>\n    )\n}\n\n\nexport default Post;","import React from 'react';\nimport {Route} from 'react-router-dom'\n\nimport {getUsers} from '../api';\n\nimport Login from './Login';\nimport Header from './Header';\nimport Register from './Register';\n// import addPosts from './AddPosts';\nimport Post from './Post';\n\n\ngetUsers();\n\nconst App = () => {\n    return (\n        <>\n                <Header />\n            <main>\n                <Route path=\"/\" />\n                <Route path=\"/login\"><Login /> </Route>\n                <Route path=\"/register\"><Register /> </Route>\n                <Route path=\"/post\"><Post /> </Route>\n           </main>\n        </>\n    )\n};\n\n\n\nexport default App;","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { BrowserRouter as Router} from 'react-router-dom';\n\nimport App from './components/app';\n\nReactDom.render(<Router><App /></Router>, document.getElementById('root'));\n\n"],"sourceRoot":""}